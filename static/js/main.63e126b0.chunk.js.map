{"version":3,"sources":["pages/device-select.tsx","pages/capture.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DeviceList","onChangeDevice","videoinput","setVideoinput","useState","audioinput","setAudioinput","audiooutput","setAudiooutput","videoinputRef","useRef","audioinputRef","audiooutputRef","useEffect","navigator","mediaDevices","enumerateDevices","then","devices","forEach","device","kind","v","console","log","catch","err","error","changeDevice","current","selectedIndex","getSelectedDevices","title","ref","map","onChange","value","deviceId","label","CaptureMedia","constructor","constraints","videoRef","audio","video","stream","this","setVideoRef","getUserMedia","displayInHtml","getMedia","getDisplayMedia","srcObject","takeSnap","canvasRef","ImageCapture","getVideoTracks","grabFrame","img","canvas","ctx","getContext","width","height","widthStr","heightStr","getComputedStyle","Number","split","clearRect","drawImage","changeDevices","getTracks","track","removeTrack","Capture","myVideoRef","capture","className","src","autoPlay","onClick","startCamera","startScreen","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAUe,SAASA,GAAW,eACjCC,IAIA,MAAOC,EAAYC,GAAiBC,mBAA4B,KACzDC,EAAYC,GAAiBF,mBAA4B,KACzDG,EAAaC,GAAkBJ,mBAA4B,IAC5DK,EAAgBC,iBAA0B,MAC1CC,EAAgBD,iBAA0B,MAC1CE,EAAiBF,iBAA0B,MAEjDG,qBAAU,KACRC,UAAUC,aACPC,mBACAC,MAAMC,IACLA,EAAQC,SAASC,IACf,OAAQA,EAAOC,MACb,IAAK,aACHlB,GAAemB,GAAM,IAAIA,EAAGF,KAC5B,MAEF,IAAK,aACHd,GAAegB,GAAM,IAAIA,EAAGF,KAC5B,MAEF,IAAK,cACHZ,GAAgBc,GAAM,IAAIA,EAAGF,KAC7B,MAEF,QACEG,QAAQC,IAAK,kBAAiBJ,EAAOC,eAI5CI,OAAOC,IAEN,MADAH,QAAQI,MAAMD,GACRA,OAET,IACH,MAOME,EAAe,KACnB,MAAMV,EARmB,MAAyB,IAAD,YACjD,MAAO,CACLhB,WAAYA,EAAU,oBAACO,EAAcoB,eAAf,aAAC,EAAuBC,qBAAxB,QAAyC,GAC/DzB,WAAYA,EAAU,oBAACM,EAAckB,eAAf,aAAC,EAAuBC,qBAAxB,QAAyC,GAC/DvB,YAAaA,EAAW,oBAACK,EAAeiB,eAAhB,aAAC,EAAwBC,qBAAzB,QAA0C,KAIpDC,GAChB9B,EAAeiB,IAEjB,OACE,8BACG,CACC,CAAEc,MAAO,qBAAOd,QAAShB,EAAY+B,IAAKxB,GAC1C,CAAEuB,MAAO,qBAAOd,QAASb,EAAY4B,IAAKtB,IAE1CuB,KAAI,EAAGF,QAAOd,UAASe,SAErB,kCACGD,EADH,IAEE,wBAAQG,SAAUP,EAAcK,IAAKA,EAArC,SACGf,EAAQgB,KAAKd,GAEV,wBAA8BgB,MAAOhB,EAAOiB,SAA5C,SACGjB,EAAOkB,OADGlB,EAAOiB,gBALhBL,O,MC/DtB,MAAMO,EAYJC,YACEC,EACAC,GACC,KAbKD,YAAsC,CAC5CE,OAAO,EACPC,OAAO,GAWP,KARMC,YAQN,OALMH,cAKN,EACAI,KAAKL,YAAL,OAAmBA,QAAnB,IAAmBA,IAAeK,KAAKL,YACvCK,KAAKD,OAAS,KACdC,KAAKJ,SAAWA,EAGlBK,YAAYL,GACVI,KAAKJ,SAAWA,EAIJ,iBACZI,KAAKD,aAAe/B,UAAUC,aAC3BiC,aAAaF,KAAKL,aAClBhB,OAAOC,IAGN,MAFAH,QAAQI,MAAMD,GAERA,KAEVoB,KAAKG,gBAGU,0BAETH,KAAKI,WAII,oBAEfJ,KAAKD,aAAe/B,UAAUC,aAE3BoC,gBAAgBL,KAAKL,aACrBhB,OAAOC,IAGN,MAFAH,QAAQI,MAAMD,GAERA,KAGVoB,KAAKG,gBAIPA,gBAAiB,IAAD,GACd,UAAIH,KAAKJ,gBAAT,aAAI,EAAeb,WACjBiB,KAAKJ,SAASb,QAAQuB,UAAYN,KAAKD,QAK3CQ,SAASC,GACP,IAAKR,KAAKD,OACR,OAEmB,IAAIU,aAAaT,KAAKD,OAAOW,iBAAiB,IACtDC,YAAYxC,MAAMyC,IAC7B,MAAMC,EAASL,EAAUzB,QACzB,GAAe,OAAX8B,EAAiB,CACnB,MAAMC,EAAMD,EAAOE,WAAW,MAC9B,IAAIC,EACAC,EACJ,CACE,MAAQD,MAAOE,EAAUD,OAAQE,GAAcC,iBAC7CP,GAEFG,EAAQK,OAAOH,EAASI,MAAM,MAAM,IACpCL,EAASI,OAAOF,EAAUG,MAAM,MAAM,IAGxCR,GAAOA,EAAIS,UAAU,EAAG,EAAGP,EAAOC,GAClCH,GAAOA,EAAIU,UAAUZ,EAAK,EAAG,EAAGI,EAAOC,OAM7CQ,cAAc9B,GAAsC,IAAD,EACjDK,KAAKL,YAAcA,EACnB,UAAAK,KAAKD,cAAL,SAAa2B,YAAYrD,SAASsD,IAAW,IAAD,EAC1C,UAAA3B,KAAKD,cAAL,SAAa6B,YAAYD,MAG3B3B,KAAKI,YAIM,SAASyB,IACtB,MAAMC,EAAalE,iBAAyB,MACtC4C,EAAY5C,iBAA0B,MACtCmE,EAAU,IAAItC,EAAa,CAAEI,OAAO,EAAOC,OAAO,GAAQgC,GAWhE,OACE,gCACE,cAAC,EAAD,CAAc3E,eAXG,EAAGC,aAAYG,iBAElCkB,QAAQC,IAAItB,GACZ2E,EAAQN,cAAc,CACpB3B,MAAO,CAAEP,SAAUnC,EAAWmC,UAC9BM,MAAO,CAAEN,SAAUhC,EAAWgC,eAO9B,oCACE,oCACE,2DACA,uBAAOyC,UAAU,UAAUC,IAAI,IAAIC,UAAQ,EAAC/C,IAAK2C,OAEnD,oCACE,2DACA,uBAAOE,UAAU,aAAaC,IAAI,IAAIC,UAAQ,OAEhD,oCACE,+CACA,wBAAQF,UAAU,SAAS7C,IAAKqB,UAGpC,oCACE,wBAAQ2B,QAAS,IAAMJ,EAAQK,cAA/B,sCACA,wBAAQD,QAAS,IAAMJ,EAAQxB,SAASC,GAAxC,0BACA,wBAAQ2B,QAAS,IAAMJ,EAAQM,cAA/B,4CCjIOC,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAACH,EAAD,OCOSU,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtE,MAAK,EAAGuE,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.63e126b0.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport \"./device-select.css\";\n\nexport type CurrentMediaType = {\n  videoinput: MediaDeviceInfo;\n  audioinput: MediaDeviceInfo;\n  audiooutput: MediaDeviceInfo;\n};\n\nexport default function DeviceList({\n  onChangeDevice,\n}: {\n  onChangeDevice: (currentDevics: CurrentMediaType) => void;\n}) {\n  const [videoinput, setVideoinput] = useState<MediaDeviceInfo[]>([]);\n  const [audioinput, setAudioinput] = useState<MediaDeviceInfo[]>([]);\n  const [audiooutput, setAudiooutput] = useState<MediaDeviceInfo[]>([]);\n  const videoinputRef = useRef<HTMLSelectElement>(null);\n  const audioinputRef = useRef<HTMLSelectElement>(null);\n  const audiooutputRef = useRef<HTMLSelectElement>(null);\n  // 枚举设备\n  useEffect(() => {\n    navigator.mediaDevices\n      .enumerateDevices()\n      .then((devices) => {\n        devices.forEach((device) => {\n          switch (device.kind) {\n            case \"videoinput\": {\n              setVideoinput((v) => [...v, device]);\n              break;\n            }\n            case \"audioinput\": {\n              setAudioinput((v) => [...v, device]);\n              break;\n            }\n            case \"audiooutput\": {\n              setAudiooutput((v) => [...v, device]);\n              break;\n            }\n            default:\n              console.log(`unknow device: ${device.kind}`);\n          }\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        throw err;\n      });\n  }, []);\n  const getSelectedDevices = (): CurrentMediaType => {\n    return {\n      videoinput: videoinput[videoinputRef.current?.selectedIndex ?? 0],\n      audioinput: audioinput[audioinputRef.current?.selectedIndex ?? 0],\n      audiooutput: audiooutput[audiooutputRef.current?.selectedIndex ?? 0],\n    };\n  };\n  const changeDevice = () => {\n    const devices = getSelectedDevices();\n    onChangeDevice(devices);\n  };\n  return (\n    <div>\n      {[\n        { title: \"摄像头\", devices: videoinput, ref: videoinputRef },\n        { title: \"麦克风\", devices: audioinput, ref: audioinputRef },\n        // { title: \"喇叭\", devices: audiooutput, ref: audiooutputRef },\n      ].map(({ title, devices, ref }) => {\n        return (\n          <label key={title}>\n            {title}:\n            <select onChange={changeDevice} ref={ref}>\n              {devices.map((device) => {\n                return (\n                  <option key={device.deviceId} value={device.deviceId}>\n                    {device.label}\n                  </option>\n                );\n              })}\n            </select>\n          </label>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\n\nimport DeviceSelect, { CurrentMediaType } from \"./device-select\";\n\nimport \"./capture.css\";\n\nclass CaptureMedia {\n  // 存放媒体约束条件\n  private constraints: MediaStreamConstraints = {\n    audio: true,\n    video: true,\n  };\n  // 存放媒体流\n  private stream: MediaStream | null;\n\n  // 视频元素,\n  private videoRef: React.RefObject<HTMLVideoElement> | undefined;\n\n  constructor(\n    constraints?: MediaStreamConstraints,\n    videoRef?: React.RefObject<HTMLVideoElement>\n  ) {\n    this.constraints = constraints ?? this.constraints;\n    this.stream = null;\n    this.videoRef = videoRef;\n  }\n\n  setVideoRef(videoRef?: React.RefObject<HTMLVideoElement>) {\n    this.videoRef = videoRef;\n  }\n\n  // 获取媒体流,并在videoRef引用元素上播放\n  async getMedia() {\n    this.stream = await navigator.mediaDevices\n      .getUserMedia(this.constraints)\n      .catch((err) => {\n        console.error(err);\n        // 将异常继续抛出\n        throw err;\n      });\n    this.displayInHtml();\n  }\n  // 调用摄像头\n  async startCamera() {\n    //  当出现错误时 this.stream 的值是 catch 中返回的,没有显示返回则是 void\n    await this.getMedia();\n  }\n\n  // 分享屏幕\n  async startScreen() {\n    //  当出现错误时 this.stream 的值是 catch 中返回的,没有显示返回则是 void\n    this.stream = await navigator.mediaDevices\n      // @ts-ignore\n      .getDisplayMedia(this.constraints)\n      .catch((err: Error) => {\n        console.error(err);\n        // 将异常继续抛出\n        throw err;\n      });\n\n    this.displayInHtml();\n  }\n\n  // 播放媒体流\n  displayInHtml() {\n    if (this.videoRef?.current) {\n      this.videoRef.current.srcObject = this.stream;\n    }\n  }\n\n  // 截图, 将视频流的当前帧显示到canvas中\n  takeSnap(canvasRef: React.RefObject<HTMLCanvasElement>) {\n    if (!this.stream) {\n      return;\n    }\n    const imageCapture = new ImageCapture(this.stream.getVideoTracks()[0]);\n    imageCapture.grabFrame().then((img: ImageBitmap) => {\n      const canvas = canvasRef.current;\n      if (canvas !== null) {\n        const ctx = canvas.getContext(\"2d\");\n        let width;\n        let height;\n        {\n          const { width: widthStr, height: heightStr } = getComputedStyle(\n            canvas\n          );\n          width = Number(widthStr.split(\"px\")[0]);\n          height = Number(heightStr.split(\"px\")[0]);\n        }\n\n        ctx && ctx.clearRect(0, 0, width, height);\n        ctx && ctx.drawImage(img, 0, 0, width, height);\n      }\n    });\n  }\n\n  // 更改设备\n  changeDevices(constraints: MediaStreamConstraints) {\n    this.constraints = constraints;\n    this.stream?.getTracks().forEach((track) => {\n      this.stream?.removeTrack(track);\n    });\n\n    this.getMedia();\n  }\n}\n\nexport default function Capture() {\n  const myVideoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const capture = new CaptureMedia({ audio: false, video: true }, myVideoRef);\n\n  const changeDevice = ({ videoinput, audioinput }: CurrentMediaType) => {\n    // @TODO 构造 TrackConstraints 传入capture.applyConstraints\n    console.log(videoinput);\n    capture.changeDevices({\n      video: { deviceId: videoinput.deviceId },\n      audio: { deviceId: audioinput.deviceId },\n    });\n  };\n\n  return (\n    <div>\n      <DeviceSelect onChangeDevice={changeDevice} />\n      <section>\n        <section>\n          <div>我的视频</div>\n          <video className=\"myvideo\" src=\"#\" autoPlay ref={myVideoRef}></video>\n        </section>\n        <section>\n          <div>对方视频</div>\n          <video className=\"othervideo\" src=\"#\" autoPlay></video>\n        </section>\n        <section>\n          <div>画布</div>\n          <canvas className=\"canvas\" ref={canvasRef}></canvas>\n        </section>\n      </section>\n      <section>\n        <button onClick={() => capture.startCamera()}>捕捉媒体</button>\n        <button onClick={() => capture.takeSnap(canvasRef)}>拍照</button>\n        <button onClick={() => capture.startScreen()}>分享屏幕</button>\n      </section>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Capture from \"./pages/capture\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Capture />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}